<html window-frame="extended" window-blurbehind="dark" theme="dark" window-width="600" window-icon="window_icon.svg">

<head>
    <title>Transmitic</title>
    <style src="extended-window-chrome.css"></style>
    <style>
        @import url(style.css);

        body {
            margin: 0;
        }

        div {
            min-width: min-content;
        }

        frameset {
            min-height: min-content;
        }

        splitter {
            display: none;
            border: none;
            width: 3px;
            background: color(border);
        }

        splitter:hover {
            background: color(accent);
        }
    </style>
    <script src="global_transmitic.js"></script>
    <script>
        document.attributes["theme"] = "dark";

        function replaceWindow() {
            var [sx, sy, sw, sh] = Window.this.screenBox("workarea", "xywh");
            const w = 1300 * devicePixelRatio;
            const h = 800 * devicePixelRatio;
            Window.this.move(sx + (sw - w) / 2, sy + (sh - h) / 2, w, h);
        }

        let navLinks = [
            {
                "name": "Downloads",
                "icon": "ic_fluent_arrow_download_48_regular.svg",
                "html": "downloads.htm"
            },
            {
                "name": "Shared With Me",
                "icon": "ic_fluent_globe_32_regular.svg",
                "html": "shared_with_me.htm"
            },
            {
                "name": "My Shared",
                "icon": "ic_fluent_folder_48_regular.svg",
                "html": "my_shared.htm"
            },
            {
                "name": "Users",
                "icon": "ic_fluent_people_32_regular.svg",
                "html": "users.htm"
            },
            {
                "name": "My ID",
                "icon": "ic_fluent_guest_28_regular.svg",
                "html": "my_id.htm"
            },
            {
                "name": "Logging",
                "icon": "ic_fluent_document_text_24_regular.svg",
                "html": "logging.htm"
            },
            {
                "name": "About",
                "icon": "ic_fluent_info_28_regular.svg",
                "html": "about.htm"
            },
            {
                "name": "Help",
                "icon": "ic_fluent_question_circle_28_regular.svg",
                "html": "help.htm"
            }
        ];


        class NavBar extends Element {

            counter;  // Simple counter/index for each navlink
            activeIndex;  // Index of active navlink

            this(props) {
                this.counter = 0;
                this.activeIndex = props.activeIndex;
            }

            render() {
                this.counter = 0;
                return <div>
                    {navLinks.map((d) => <NavLink name={d.name} icon={d.icon} htmlPage={d.html} navIndex={this.counter++} activeIndex={this.activeIndex} />)}
                </div>;
            }
        }

        class NavLink extends Element {

            navIndex;
            activeIndex;
            htmlPage;

            this(props) {
                this.navIndex = props.navIndex;
                this.activeIndex = props.activeIndex;
                this.htmlPage = props.htmlPage;

                if (this.navIndex == this.activeIndex) {
                    this.navBlockStlye = "background-color: color(accent);";
                }
                else {
                    this.navBlockStlye = "";
                }
            }

            render(props) {
                return <div class="nav-button">
                    <div class="nav-block" style={this.navBlockStlye}>&nbsp;</div>
                    <img class="nav-icon" src={props.icon} />
                    <div class="nav-text">{props.name}</div>
                </div>;
            }

            ["on click at div.nav-button"]() {
                document.$("frame").src = this.htmlPage;
                this.parentElement.componentUpdate({ activeIndex: this.navIndex });
            }
        }

        document.ready = function () {
            replaceWindow();

            let activeIndexStart = 0;
            if (Window.this.xcall('get_is_first_start')) {
                let start_index = 7;
                document.$("frame").src = navLinks[start_index].html;
                activeIndexStart = start_index;
            } else {
                document.$("frame").src = navLinks[0].html;
            }
            document.$("div.nav-bar").content(<NavBar activeIndex={activeIndexStart} />);
        }

    </script>
</head>
<window-header>
    <window-icon role="window-icon" />
    <window-caption role=window-caption>Transmitic Beta</window-caption>
    <window-buttons>
        <window-button role="window-minimize"></window-button>
        <window-button role="window-maximize"></window-button>
        <window-button role="window-close"></window-button>
    </window-buttons>
</window-header>

<body>
    <frameset cols="200px,*">
        <div class="nav-bar">
        </div>
        <splitter />
        <frame />
    </frameset>
</body>

</html>