<html>

<head>
    <title>My Shared</title>
    <style>
        @import url(style.css);

        div.file-drop-zone {
            /* prototype: FileDropZone; */
            /* height: 5em; */
            width: 15em;
            color: color(button-back);
            border: 2px dashed;
            vertical-align: middle;
            text-align: center;
            margin: 0em 0em 0em 1em;
            padding: 6dip 10dip 6dip 10dip;
            display: inline-block;
        }

        div.file-drop-zone.active-target {
            background: color(highlight-t);
            border-color: color(panel-back);
            color: #000;
        }

        .spacer {
            padding-bottom: 20dip;
        }
    </style>
    <script src="global_transmitic.js"></script>
    <script type="module">
        import * as Environment from "@env";

        class FileDropZone extends Element {
            files = []; // filtered files

            render() {
                return <div class="file-drop-zone">
                    Drop file(s) and folder(s) here
                </div>
            }

            ondragaccept(evt) {
                if (evt.detail.dataType == "file") {
                    this.files = evt.detail.data;
                    if (!Array.isArray(this.files))
                        this.files = [this.files];
                    return true; // accept only files
                }
            }

            ondragenter(evt) {
                this.classList.add("active-target");
                return true;
            }

            ondragleave(evt) {
                this.classList.remove("active-target");
                return true;
            }

            ondrag(evt) {
                return true;
            }

            ondrop(evt) {
                this.classList.remove("active-target");

                for (let i = 0; i < this.files.length; i++) {
                    this.files[i] = decodeURI(this.files[i]);
                }

                let response = Window.this.xcall('add_files', [this.files]); // Weird: files is already array but I need this extra array here
                if (response[0] == 0) {
                    setMsgBoxSuccess("File(s) added to share.");
                    this.parentElement.parentElement.parentElement.componentUpdate();
                }
                else {
                    setMsgBoxError("Failed to add files. " + response[1]);
                }

                return true;
            }

        }

        class AFile extends Element {

            filePath;

            this(props) {
                this.filePath = props.filePath;
            }

            render(props) {

                let sharedWithBlock = <div></div>
                if (props.sharedWith.length != 0) {
                    sharedWithBlock = <div>
                        <div style="padding: 1em 0 1em 0;">
                            Shared With:
                        </div>

                        <div class="shared-with">
                            {props.sharedWith.map((d, index) => <div style="padding-bottom: 1em;">{index + 1}. {d} <button style="margin-left: 1em;" class="remove-shared-with" user={d}>Remove</button></div>)}
                        </div>
                    </div>

                }

                return <div class="my-file" selectable>
                    <span><strong>{props.filePath}</strong></span>
                    <br />
                    <div class="my-file-inner">
                        <label style="margin-right: 1em; display: inline-block;" for="add-user">Add User:</label>

                        <select name="add-user" id="add-user">
                            <option value=""></option>
                            {props.addUsers.map((d) => <option value={d}>{d}</option>)}
                        </select>
                        {sharedWithBlock}
                        <br />
                        <button class="remove-sharing danger-button">Remove file from Sharing</button>
                    </div>

                    <div style="padding: 10dip 0 10dip 0"></div>
                    <hr />
                    <div style="padding: 10dip 0 10dip 0"></div>

                </div>
            }

            ["on change at select#add-user"](evt, btn) {
                let selected_user = btn.value;
                if (!selected_user) {
                    return;
                }
                let response = Window.this.xcall('add_user_to_shared', selected_user, this.filePath);
                if (response[0] == 0) {
                    setMsgBoxSuccess("User added. Now sharing file <strong>" + this.filePath + "</strong> with <strong>" + selected_user + "</strong>");
                    this.parentElement.componentUpdate();
                }
                else {
                    setMsgBoxError("Failed to share with user. " + response[1]);
                }
            }

            ["on click at button.remove-shared-with"](evt, btn) {
                let user = btn.getAttribute("user");
                let response = Window.this.xcall('remove_user_from_sharing', user, this.filePath);
                if (response[0] == 0) {
                    setMsgBoxSuccess("User removed. You will no longer share file <strong>" + this.filePath + "</strong> with <strong>" + user + "</strong>");
                    this.parentElement.componentUpdate();
                }
                else {
                    setMsgBoxError("Failed to remove user.");
                }
            }

            ["on click at button.remove-sharing"]() {
                let response = Window.this.xcall('remove_file_from_sharing', this.filePath);
                if (response[0] == 0) {
                    setMsgBoxSuccess("File removed. You will no longer be sharing <strong>" + this.filePath + "</strong>");
                    this.parentElement.componentUpdate();
                }
                else {
                    setMsgBoxError("Failed to remove file from sharing.");
                }
            }
        }

        class MyFiles extends Element {

            this(props) {

            }

            render(props) {
                let my_files = Window.this.xcall('get_my_sharing_files');

                let drop = <span></span>;
                if (Environment.PLATFORM != "Linux") {
                    drop = <span> | <FileDropZone /></span>;
                }

                return <div>
                    <div class="menu-bar">
                        <button id="add-file">Add Files</button> |
                        <button id="add-folder">Add Folder</button>
                        {drop}
                    </div>
                    <br />
                    {my_files.map((d) => <AFile filePath={d.file_path} sharedWith={d.shared_with} addUsers={d.add_users} />)}
                </div>;
            }

            ["on click at button#add-file"]() {
                let files = Window.this.selectFile({
                    filter: "All Files (*.*)|*.*",
                    mode: "open-multiple",
                });

                if (files) {

                    if ((typeof files) == 'string') { // instanceof isn't working
                        files = [files];
                    }
                    for (let i = 0; i < files.length; i++) {
                        files[i] = decodeURI(files[i]);
                    }

                    let response = Window.this.xcall('add_files', [files]); // Weird: files is already array but I need this extra array here
                    if (response[0] == 0) {
                        setMsgBoxSuccess("File(s) added to share.");
                        this.componentUpdate();
                    }
                    else {
                        setMsgBoxError("Failed to add files. " + response[1]);
                    }
                }
            }

            ["on click at button#add-folder"]() {
                let files = Window.this.selectFolder();
                if (files) {
                    files = decodeURI(files);

                    // This double files array: 
                    // rust add_files expects an array and selectFolder only returns 1 string. Add array.
                    // sciter is expanding a single array into args causing failures, but works with an outer array. Add array.
                    // total == 2 arrays
                    let response = Window.this.xcall('add_files', [[files]]);
                    if (response[0] == 0) {
                        setMsgBoxSuccess("Folder added to share.");
                        this.componentUpdate();
                    }
                    else {
                        setMsgBoxError("Failed to add folder. " + response[1]);
                    }
                }
            }
        }

        // Set port
        document.$("button#set-port").onclick = function () {
            let portValue = document.$("input#port").value;
            let response = Window.this.xcall('set_port', portValue);
            if (response[0] == 0) {
                setMsgBoxSuccess("Port is now set to <strong>" + portValue + "</strong>");
            }
            else {
                setMsgBoxError("Failed to set port. " + response[1]);
            }
        }

        // Set sharing state
        document.$("form.sharing-form").on("click", function () {
            var sharing_state = this.value.Sharing;
            let response = Window.this.xcall('set_my_sharing_state', sharing_state);
            if (response[0] == 0) {
                setMsgBoxSuccess("Sharing is now set to <strong>" + sharing_state + "</strong>");
            }
            else {
                setMsgBoxError("Failed to set sharing state. " + response[1]);
            }
        });

        document.$("#sharing-help").on("click", function () {
            let helpText = <div>
                <strong>Off</strong>&nbsp;= No one can connect to download your files<br /><br />
                <strong>Internet</strong>&nbsp;= Devices from the internet, and your local machine, can connect to download your files<br /><br />
                <strong>Local Machine</strong>&nbsp;= Only "Users" on your local machine can connect to download your files. Useful for trying out Transmitic features with another Transmitic instance.
            </div>;
            displayHelpModal(Window.this, helpText);
        });

        document.$("#reverse-help").on("click", function () {
            let helpText = <div>
                When Reverse Connection is <strong>On</strong>, Transmitic will periodically connect to users you share with, to let them download files from you.<br /><br />

                If you can connect and download from users, but users cannot connect <strong>to you</strong> and download, turn Reverse Connection <strong>On</strong>.<br /><br />

                If users have no issues connecting <strong>to you</strong>, there is no need for Reverse Connection to be On.<br /><br />

                If you have Reverse Connection <strong>On</strong>, the users you connect to must have:
                <ol>
                    <li style="padding-bottom: 3dip;">Sharing On</li>
                    <li>Reverse Connection Off</li>
                </ol><br />

                <strong>Technical Notes</strong>

                <ol>
                    <li style="padding-bottom: 8dip;">Reverse Connections will be made every several seconds, increasing time, eventually being made every 30 minutes. Turn Sharing Off, and then back On, to restart this time.</li>
                    <li>When Reverse Connection is On, incoming connections will not be accepted.</li>
                </ol>

            </div>;
            displayHelpModal(Window.this, helpText);
        });

        document.$("#ignore-incoming-help").on("click", function () {
            let helpText = <div>
                <strong>On</strong>&nbsp;= Any IP will be allowed to connect, as long as the Public ID is in your "Users" tab.
                <br /><br />
                <strong>Off</strong>&nbsp;= Only IPs from the "Users" tab will be allowed to connect. Any IP not from the "Users" tab will be rejected.
                <br /><br />
                <strong>On</strong>&nbsp;is useful if your Users' IPs change and you do not want to keep them updated. It is also useful if you have a unique network setup where the incoming IPs would never match.
                <br /><br />
                <strong>Note</strong>: No matter which option you choose, the Public IDs will still be checked.
            </div >;
            displayHelpModal(Window.this, helpText);
        });

        // Set Ignore Incoming
        document.$("form.ignore-incoming-form").on("click", function () {
            var state = (this.value.IgnoreIncoming === 'true');
            var stateStr = (state ? 'On' : 'Off');
            let response = Window.this.xcall('set_ignore_incoming', state);
            if (response[0] == 0) {
                setMsgBoxSuccess("Ignore Incoming is now set to <strong>" + stateStr + "</strong>");
            }
            else {
                setMsgBoxError("Failed to set Ignore Incoming. " + response[1]);
                getIgnoreIncomingState();
            }
        });

        // Set Reverse Connection
        document.$("form.reverse-form").on("click", function () {
            var state = (this.value.Reverse === 'true');
            var stateStr = (state ? 'On' : 'Off');
            let response = Window.this.xcall('set_reverse_connection', state);
            if (response[0] == 0) {
                setMsgBoxSuccess("Reverse Connection is now set to <strong>" + stateStr + "</strong>");
            }
            else {
                setMsgBoxError("Failed to set Reverse Connection. " + response[1]);
                getReverseState();
            }
        });

        function getIgnoreIncomingState() {
            let response = Window.this.xcall('is_ignore_incoming');

            // TODO these loops need to go
            let buttons = document.querySelectorAll("button[name=IgnoreIncoming]");
            for (const b of buttons) {
                b.checked = false;
            }
            document.$("button[name=IgnoreIncoming][value=" + response + "]").state.checked = true;
        }

        function getReverseState() {
            let response = Window.this.xcall('is_reverse_connection');

            let buttons = document.querySelectorAll("button[name=Reverse]");
            for (const b of buttons) {
                b.checked = false;
            }
            document.$("button[name=Reverse][value=" + response + "]").state.checked = true;
        }

        function getMySharingState() {
            let response = Window.this.xcall('get_my_sharing_state');
            if (response[0] == 0) {
                let sharingButtons = document.querySelectorAll("button[name=Sharing]");
                for (const b of sharingButtons) {
                    b.checked = false;
                }
                document.$("button[name=Sharing][value=" + response[1] + "]").state.checked = true;
            }
            else {
                setMsgBoxError("Failed to get sharing state. " + response[1]);
            }
        }

        document.ready = function () {
            eachPageReady();

            // Get states
            getMySharingState();
            getIgnoreIncomingState();
            getReverseState();

            // Get port
            let response = Window.this.xcall('get_sharing_port');
            document.$("input#port").value = response;
            document.$("div#my-files").content(<MyFiles />);

            this.timer(1000, () => {
                let response = Window.this.xcall('get_and_reset_my_sharing_error');
                if (response[0] != 0) {
                    setMsgBoxError(response[1]);
                    getMySharingState();
                }
                return true;
            });
        }



    </script>
</head>

<body>
    <div class="main-body">
        <div id="msg-box"></div>

        <h1>
            My Shared
        </h1>

        <h2>Sharing Settings</h2>
        <div>Sharing <img id="sharing-help" style="height:1.3em; vertical-align:middle;"
                src="ic_fluent_question_circle_28_regular.svg" />:
        </div>
        <form class="sharing-form">
            <div style="margin-top: 0.5em;">
                <button id="off-radio" type="radio" name="Sharing" value="Off">Off</button>&nbsp;&nbsp;&nbsp;
                <button id="internet-radio" type="radio" name="Sharing"
                    value="Internet">Internet</button>&nbsp;&nbsp;&nbsp;
                <button type="radio" name="Sharing" value="Local">Local Machine</button>&nbsp;&nbsp;
            </div>
        </form>

        <div class="spacer"></div>

        <div>Ignore Incoming IP <img id="ignore-incoming-help" style="height:1.3em; vertical-align:middle;"
                src="ic_fluent_question_circle_28_regular.svg" />:
        </div>
        <form class="ignore-incoming-form">
            <div style="margin-top: 0.5em;">
                <button id="ignore-incoming-off-radio" type="radio" name="IgnoreIncoming"
                    value=false>Off</button>&nbsp;&nbsp;&nbsp;
                <button id="ignore-incoming-on-radio" type="radio" name="IgnoreIncoming" value=true>On</button>
            </div>
        </form>

        <div class="spacer"></div>

        <div>Reverse Connection <img id="reverse-help" style="height:1.3em; vertical-align:middle;"
                src="ic_fluent_question_circle_28_regular.svg" />:
        </div>
        <form class="reverse-form">
            <div style="margin-top: 0.5em;">
                <button id="reverse-off-radio" type="radio" name="Reverse" value=false>Off</button>&nbsp;&nbsp;&nbsp;
                <button id="reverse-on-radio" type="radio" name="Reverse" value=true>On</button>
            </div>
        </form>

        <div class="spacer"></div>

        Port:
        <br style="padding-bottom: 0.5em;" />
        <input id="port" size="8" type="text"></input>&nbsp;&nbsp;&nbsp;<button id="set-port" name="set-port"
            style="font-size: 10pt;">Set Port</button>

        <br>
        <h2>My Shared Files</h2>

        <div id="my-files">

        </div>




    </div>
</body>

</html>