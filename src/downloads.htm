<html>

<head>
    <title>Downloads</title>
    <style>
        @import url(style.css);
    </style>
    <script src="global_transmitic.js"></script>
    <script>

        let all_downloads = Window.this.xcall('get_all_downloads');
        let all_uploads = Window.this.xcall('get_all_uploads');


        class SingleDownload extends Element {

            filePath;
            owner;
            filePathLocalDisk;
            sizeString;

            this(props) {
                this.filePath = escapeHTML(props.path);
                this.owner = props.owner;
                this.filePathLocalDisk = escapeHTML(props.filePathLocalDisk);
            }

            render(props) {
                let description;
                let downloadClass;
                let openDownload = "";
                let cancelDownload = "";
                let pauseDownload = "";
                let spacer = <br />;
                if (props.downloadState == "inProgress") {
                    downloadClass = "download-active";
                    description = props.owner + " | " + props.sizeString + " | " + props.percent + "% | Downloading now...";
                    openDownload = <button class="open-download">Open</button>;
                    cancelDownload = <button class="cancel-download">Cancel</button>;
                    //pauseDownload = <button class="pause-all">Pause Downloads from My Friend</button>;
                } else if (props.downloadState == "paused") {
                    downloadClass = "download-paused";
                    description = props.owner + " | " + props.sizeString + " | " + props.percent + "% | Paused";
                    openDownload = <button class="open-download">Open</button>;
                    cancelDownload = <button class="cancel-download">Cancel</button>;
                    //pauseDownload = <button class="pause-all">Pause Downloads from My Friend</button>;
                }
                else if (props.downloadState == "invalid") {
                    downloadClass = "download-invalid";
                    description = props.owner + " | Invalid or no longer shared with you";
                    spacer = "";
                    //cancelDownload = <button class="cancel-download">Cancel</button>;
                    //pauseDownload = <button class="pause-all">Pause Downloads from My Friend</button>;
                }
                else if (props.downloadState == "queued") {
                    downloadClass = "download-offline";
                    description = props.owner + " | Queued for Download";
                    cancelDownload = <button class="cancel-download">Cancel</button>;
                    //pauseDownload = <button class="pause-all">Pause Downloads from My Friend</button>;
                }
                else if (props.downloadState == "offline") {
                    if (props.error != "") {
                        downloadClass = "download-offline-error";
                        description = props.owner + " | " + props.error;
                    } else {
                        downloadClass = "download-offline";
                        description = props.owner + " | User currently offline";
                    }

                    cancelDownload = <button class="cancel-download">Cancel</button>;
                    //pauseDownload = <button class="pause-all">Pause Downloads from My Friend</button>;
                }
                else if (props.downloadState == "finished") {
                    downloadClass = "download-finished";
                    description = props.owner + " | " + props.sizeString + " | 100% | Download Finished";
                    openDownload = <button class="open-download">Open</button>;
                }

                this.filePath = escapeHTML(props.path);
                this.owner = props.owner;
                this.filePathLocalDisk = escapeHTML(props.filePathLocalDisk);

                return <div><div class={"download " + downloadClass}>
                    <div class="download-inner">
                        <div selectable>
                            {description}
                            <br /><br />
                            {this.filePath}
                        </div>

                        {spacer}
                        {openDownload}
                        {cancelDownload}
                        {pauseDownload}
                    </div>
                </div>
                    <hr />
                </div>;
            }

            ["on click at button.cancel-download"]() {
                Window.this.xcall('downloads_cancel_single', this.owner, this.filePath);
                setMsgBoxSuccess("Download will be cancelled. <strong>" + this.filePath + "</strong>");
            }

            ["on click at button.open-download"]() {
                Window.this.xcall('downloads_open_single', this.filePathLocalDisk);
            }
        }

        class PausedDownloadsBar extends Element {

            this(props) {

            }

            render(props) {
                if (props.is_downloading_paused) {
                    return <div style="background-color: #fffa66; padding: 1em 0 1em 0; color: #000; margin: 0 0 1em 0;">
                        <div style="margin: 0 0 0 1em;"><strong>All Downloads are Paused</strong></div>
                    </div>
                } else {
                    return <div style="display:none;"></div>
                }

            }
        }

        class MyDownloads extends Element {

            this(props) {

            }

            updateDownloads(evt) {
                all_downloads = Window.this.xcall('get_all_downloads');
                this.componentUpdate();
            }

            componentDidMount() {
                this.onGlobalEvent("render-downloads", this.updateDownloads);

                this.timer(2000, () => {
                    this.updateDownloads(null);
                    return true; // to keep the timer ticking
                });
            }

            render(props) {
                let is_downloading_paused = all_downloads.is_downloading_paused;
                let inProgressPausedState;
                if (is_downloading_paused) {
                    inProgressPausedState = 'paused';
                } else {
                    inProgressPausedState = 'inProgress'
                }
                return <div>
                    <PausedDownloadsBar is_downloading_paused={is_downloading_paused} />
                    {all_downloads.in_progress.map((d) => <SingleDownload owner={d.owner} percent={d.percent} path={d.path} downloadState={inProgressPausedState} filePathLocalDisk={d.path_local_disk} sizeString={d.size} />)}
                    {all_downloads.invalid.map((d) => <SingleDownload owner={d.owner} percent={d.percent} path={d.path} downloadState="invalid" filePathLocalDisk={d.path_local_disk} />)}
                    {all_downloads.queued.map((d) => <SingleDownload owner={d.owner} percent={d.percent} path={d.path} downloadState="queued" filePathLocalDisk={d.path_local_disk} />)}
                    {all_downloads.offline.map((d) => <SingleDownload owner={d.owner} percent={d.percent} path={d.path} downloadState="offline" filePathLocalDisk={d.path_local_disk} error={d.error} />)}
                    {all_downloads.finished.map((d) => <SingleDownload owner={d.owner} percent={d.percent} path={d.path} downloadState="finished" filePathLocalDisk={d.path_local_disk} sizeString={d.size} />)}
                </div>;
            }
        }

        class SingleDownloadFromMe extends Element {

            this(props) {

            }

            render(props) {

                let msg = 'Message not set';
                if (props.percent == 100) {
                    msg = `${props.name} | Completed`
                } else {
                    if (props.isOnline) {
                        msg = `${props.name} | ${props.percent}% | Downloading now...`
                    } else {
                        msg = `${props.name} | ${props.percent}% | Offline`
                    }

                }

                return <div><div class="download">
                    <div class="download-inner" selectable>
                        {msg}
                        <br /><br />
                        {props.path}
                    </div>
                </div>
                    <hr />
                </div>
            }
        }

        class DownloadsFromMe extends Element {

            this(props) {

            }

            updateDownloads(evt) {
                all_uploads = Window.this.xcall('get_all_uploads');
                this.componentUpdate();
            }

            componentDidMount() {
                this.onGlobalEvent("render-downloads", this.updateDownloads);

                this.timer(2000, () => {
                    this.updateDownloads(null);
                    return true; // to keep the timer ticking
                });
            }

            render(props) {
                return <div>
                    {all_uploads.map((d) => <SingleDownloadFromMe name={d.nickname} percent={d.percent} path={d.path} isOnline={d.is_online} />)}
                </div>
            }

        }



        class MenuBar extends Element {

            this(props) {

            }

            render() {

                let pauseResumeButton;
                let response = Window.this.xcall('is_downloading_paused');
                if (response) {
                    pauseResumeButton = <button id="resume-all-downloads">Resume All</button>;

                } else {
                    pauseResumeButton = <button id="pause-all-downloads">Pause All</button>;

                }

                return <div class="menu-bar">
                    <button id="open-downloads">Open Downloads</button> |
                    <button id="clear-finished">Clear Finished</button> |
                    <button id="clear-invalid">Clear Invalid</button> |
                    <button id="cancel-all-downloads">Cancel All</button> |
                    {pauseResumeButton}
                </div>;
            }

            ["on click at button#open-downloads"]() {
                let response = Window.this.xcall('downloads_open');
            }

            ["on click at button#clear-finished"]() {
                Window.this.xcall('downloads_clear_finished');
                Window.post(new Event("render-downloads"));
            }

            ["on click at button#clear-invalid"]() {
                Window.this.xcall('downloads_clear_invalid');
                Window.post(new Event("render-downloads"));
            }

            ["on click at button#cancel-all-downloads"]() {
                let response = Window.this.xcall('downloads_cancel_all');
                setMsgBoxSuccess("All Downloads are being cancelled");
            }

            ["on click at button#pause-all-downloads"]() {
                let response = Window.this.xcall('downloads_pause_all');
                setMsgBoxSuccess("All Downloads are being paused");
                Window.post(new Event("render-downloads"));
                this.componentUpdate();
            }

            ["on click at button#resume-all-downloads"]() {
                let response = Window.this.xcall('downloads_resume_all');
                setMsgBoxSuccess("All Downloads are being resumed");
                Window.post(new Event("render-downloads"));
                this.componentUpdate();
            }

        }

        class MenuBarFromMe extends Element {

            this(props) {

            }

            render() {
                return <div class="menu-bar">
                    <button id="clear-finished-from-me">Clear</button>
                </div>;
            }

            ["on click at button#clear-finished-from-me"]() {
                let response = Window.this.xcall('downloads_clear_finished_from_me');
                Window.post(new Event("render-downloads"));
            }

        }

        document.ready = function () {
            eachPageReady();

            let myDownloadsElement = <MyDownloads />;
            let downloadsFromMeElement = <DownloadsFromMe />;
            document.$("div#my-downloads").content(myDownloadsElement);
            document.$("div#downloading-from-me").content(downloadsFromMeElement);

            document.$(".menu-bar-holder").content(<MenuBar />);
            document.$(".my-downloads-menu-bar-holder").content(<MenuBarFromMe />);
        }

    </script>
</head>

<body>

    <div class="main-body">
        <div id="msg-box"></div>

        <h1>Downloads</h1>
        <section style="border-spacing:50dip;">
            <div class="my-downloads">
                <h2>My Downloads</h2>
                <div class="menu-bar-holder">
                    <div></div><!-- sciter hack div-->
                </div>
                <hr>
                <div id="my-downloads"></div>
            </div>

            <div class="from-me">
                <h2>Users Downloading From Me</h2>
                <div class="my-downloads-menu-bar-holder">
                    <div></div><!-- sciter hack div-->
                </div>
                <hr>
                <div id="downloading-from-me"></div>
            </div>

        </section>
    </div>
</body>

</html>