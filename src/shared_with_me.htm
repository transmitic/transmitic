<html>

<head>
    <title>Shared With Me</title>
    <style>
        @import url(style.css);
    </style>
    <script src="global_transmitic.js"></script>
    <script type="module">
        import * as env from "@env";

        class DelayedList extends Element {

            this(props) {
                this.display = false;
                this.divID = props.divID;
                this.files = props.files;
                this.owner = props.owner;
            }

            render(props) {
                if (this.display) {
                    let file_list = createFileList(this.files, "", this.divID, this.owner);
                    return <div id={this.divID}>{file_list}</div>;
                } else {
                    return <div id={this.divID}></div>;
                }
            }
        }

        function createFileList(files, error, divID, owner) {
            if (!files) {
                return "";
            }

            let style = "padding-left: 1.5em";
            let parentStyle = "";
            return <div id={divID} style={parentStyle}>
                {files.map((d) => <div style={style}>{createFile(d, owner)}</div>)}
            </div>
        }

        function showMoreOnClick(evt, btn) {
            let divID = btn.getAttribute("div-id");

            let file_list_div = document.$("#" + divID);

            let children = btn.getAttribute("data-children")
            if (btn.getAttribute("data-state") == "show") {
                file_list_div.display = true;
                file_list_div.componentUpdate();
                btn.setAttribute("data-state", "collapse");
                btn.content("Collapse (" + children + ")");
            } else {
                file_list_div.display = false;
                btn.setAttribute("data-state", "show");
                btn.content("Show more (" + children + ")");
            }
            file_list_div.componentUpdate();
        }

        function createFile(d, owner) {
            let showMore = "";
            let divID = 0;
            let info = "File";
            if (d.files.length > 0) {
                info = "Folder (" + d.files.length + " files)";
                let childrenLength = d.files.length;
                if (childrenLength > 2) {
                    divID = Math.random().toString();
                    divID = divID.substring(2, divID.length);
                    showMore = <button onclick={showMoreOnClick} style="font-size: 8pt; margin-left: 1em;" class="show-more" div-id={divID} data-state="show" data-children={childrenLength}>Show more ({childrenLength})</button>;
                }
            }
            return <div><button class="file-checkbox" data-isRoot={d.isRoot} data-path={d.path} data-owner={owner} type="checkbox">{d.path} | {info} | {d.size_string} </button> {showMore} <DelayedList divID={divID} files={d.files} owner={owner} /> </div>
        }

        class SharedData extends Element {

            owner
            inProgress
            files
            error

            this(props) {
                this.owner = props.owner;
                this.inProgress = props.in_progress;
                this.files = props.files;
                this.error = props.error;
            }

            render(props) {
                let content;
                let refreshButton = <button class="refresh-user" style="font-size: 8pt; margin-left: 1em; display: inline-block;">Refresh</button>

                if (this.inProgress) {
                    content = <div>Refreshing...</div>;
                }
                else {
                    let selectAll = <span></span>;
                    if (this.files.length > 0) {
                        this.files = this.files[0].files; // skip everything/ file

                        if (this.files.length > 0) {
                            selectAll = <button class="select-all" type="checkbox">Select All</button>;

                            // set isRoot on top level files for "Select All"
                            for (let f in this.files) {
                                this.files[f].isRoot = true;
                            }
                        }
                    }

                    let errorString = "";
                    let filesContent = "No files shared with you";
                    if (this.error) {
                        errorString = <div>{this.error}</div>;
                        filesContent = "";
                    }

                    if (this.files.length > 0) {
                        filesContent = <div>{selectAll}{createFileList(this.files, this.error, 0, this.owner)}</div>;
                    }

                    if ((this.error) && (this.files.length > 0)) {
                        content = <div>{errorString}<div style="padding-bottom: 10dip;"></div>{filesContent}</div>;
                    } else {
                        content = <div>{errorString}{filesContent}</div>;
                    }


                }

                return <div>
                    <div>
                        <h3 style="display: inline-block;">{this.owner}</h3>
                        {refreshButton}
                    </div>
                    {content}
                </div>
            }


            ["on click at button.select-all"](evt, btn) {
                let query = `button[type=checkbox][data-isRoot=true][data-owner="${this.owner}"]`;
                let rootBoxes = document.querySelectorAll(query);
                for (const c of rootBoxes) {
                    c.checked = btn.checked;
                }
                if (btn.checked) {
                    document.$("button#download-selected").state.disabled = false;
                }
            }

            ["on click at button.file-checkbox"](evt, btn) {
                document.$("button#download-selected").state.disabled = false;
            }

            ["on click at button.refresh-user"](evt, btn) {
                let response = Window.this.xcall('start_refresh_shared_with_me_single_user', this.owner);
                this.componentUpdate({ inProgress: true });

                this.timer(500, () => {

                    let response = Window.this.xcall('get_shared_with_me_data');

                    let keepRefreshing = false;
                    let files = [];
                    let error;
                    for (const fileData of response) {
                        if (fileData.owner == this.owner) {
                            keepRefreshing = fileData.in_progress;
                            files = fileData.files;
                            error = fileData.error;
                        }
                    }

                    if (!keepRefreshing) {
                        this.componentUpdate({ inProgress: false, files: files, error: error, });
                    }

                    return keepRefreshing; // keep ticking
                });
            }

        }

        class SharedWithMe extends Element {

            refreshState;
            fileData;
            totalCount;
            finishedCount;

            this(props) {
                this.fileData = Window.this.xcall('get_shared_with_me_data');
                this.totalCount = 0;
                this.finishedCount = 0;
            }

            render(props) {

                if (this.fileData.length == 0) {
                    return <div>Add a new user in the "Users" tab</div>;
                }

                let contentElements = <div>{this.fileData.map((d) => <div><hr style="margin-top: 2em;" /><SharedData owner={d.owner} files={d.files} error={d.error} inProgress={d.in_progress} /> </div>)} </div>;
                let finalData = <div>
                    <button id="refresh-all">Refresh All</button>
                    <button style="margin-left: 1em;" id="download-selected" class="active-button">Download Selected</button>
                    {contentElements}
                </div>
                return finalData;
            }

            ["on click at button#download-selected"]() {
                let checkedBoxes = document.querySelectorAll("button[type=checkbox]:checked");
                let selectedFiles = [];
                let downloadCount = 0;
                for (const box of checkedBoxes) {
                    let eleClass = box.getAttribute("class");
                    if (eleClass != "file-checkbox") {
                        continue;
                    }
                    let path = box.getAttribute("data-path");
                    let owner = box.getAttribute("data-owner");
                    selectedFiles.push({ "path": path, "owner": owner });
                    downloadCount = downloadCount + 1;
                }

                if (downloadCount > 0) {
                    document.$("button#download-selected").state.disabled = true;
                    let response = Window.this.xcall('download_selected', { "files": selectedFiles });
                    setMsgBoxSuccess("<strong>" + downloadCount + "</strong> downloads started");
                    for (const box of checkedBoxes) {
                        box.checked = false;
                    }

                }

            }

            ["on click at button#refresh-all"]() {
                document.$("button#download-selected").state.disabled = true;
                let refreshButtons = document.querySelectorAll("button.refresh-user");
                for (const refresh of refreshButtons) {
                    refresh.click();
                }
            }

        }

        class DownloadPicker extends Element {

            downloadPath;

            this(props) {
                this.downloadPath = "";
                let response = Window.this.xcall('get_path_downloads_dir');
                if (response[0] == 0) {
                    this.downloadPath = response[1];
                }
                else {
                    setMsgBoxError("Failed to change download location. " + response[1]);
                }
            }

            render(props) {
                let element = <div>
                    <div style="padding-bottom: 0.5em;">Download Location:</div>
                    <input id="download-location" size="50" type="text" value={this.downloadPath}>{this.downloadPath}</input>&nbsp; <button id="download-change"
                        style="font-size: 10pt;">Change</button>&nbsp;&nbsp;<button id="download-save" style="font-size: 10pt;">Save</button>
                </div>;
                return element;
            }

            ["on click at button#download-save"]() {
                let file_path = document.$("#download-location").value;
                let response = Window.this.xcall('set_path_downloads_dir', file_path);
                if (response[0] == 0) {
                    setMsgBoxSuccess("Now saving downloads to <strong>" + file_path + "</strong>");
                }
                else {
                    setMsgBoxError("Failed to change download location. " + response[1]);
                }
            }

            ["on click at button#download-change"]() {
                let files = Window.this.selectFolder();
                if (files) {
                    files = decodeURI(files);

                    if (files.startsWith("file://")) {
                        files = files.substring(7);
                    }

                    let dirStr = "Transmitic Downloads";
                    if (!files.endsWith(dirStr)) {
                        files = files.concat(`/${dirStr}`);
                    }

                    if (env.PLATFORM == "Windows") {
                        files = files.replaceAll("/", "\\");
                        files = files.replaceAll("\\\\", "\\");
                    }

                    this.downloadPath = files;
                    this.componentUpdate();
                }
            }
        }

        document.ready = function () {
            eachPageReady();

            document.$("div#download-picker").content(<DownloadPicker />);

            document.$("div#shared-with-me").content(<SharedWithMe />);
            let downloadButton = document.$("button#download-selected");
            if (downloadButton) {
                downloadButton.state.disabled = true;
            }


        }

    </script>
</head>

<body>
    <div class="main-body" style="size:*;">
        <!-- ^ sciter hack size-->
        <div id="msg-box"></div>

        <h1>
            Shared With Me
        </h1>

        <div id="download-picker" style="size:*; height: 100dip;"></div>
        <!-- sciter hack size-->

        <div id="shared-with-me" style="size:*;"></div><!-- sciter hack size-->
    </div>
</body>

</html>